const fs = require('fs');
const path = require('path');

// Function to scan portfolio directory and generate data
function generatePortfolioData() {
    const portfolioDir = path.join(__dirname, '..', 'portfolio');
    const outputFile = path.join(__dirname, '..', 'src', 'portfolio-data.ts');
    
    console.log('Scanning portfolio directory:', portfolioDir);
    
    try {
        // Read all directories in the portfolio folder
        const items = fs.readdirSync(portfolioDir, { withFileTypes: true });
        const categories = items
            .filter(item => item.isDirectory())
            .map(item => item.name)
            .filter(name => name !== 'README.md'); // Exclude README if it's a directory
        
        console.log('Found categories:', categories);
        
        // Helper function to generate title from filename
        function generateTitleFromFileName(fileName) {
            const nameWithoutExt = fileName.replace(/\.[^/.]+$/, '');
            return nameWithoutExt
                .split(/[-_]/)
                .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
                .join(' ');
        }
        
        // Generate artwork data for each category
        const artworkData = {};
        categories.forEach(category => {
            const categoryDir = path.join(portfolioDir, category);
            try {
                const files = fs.readdirSync(categoryDir);
                const imageFiles = files.filter(file => {
                    const ext = path.extname(file).toLowerCase();
                    return ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.svg'].includes(ext);
                });
                
                artworkData[category] = imageFiles.map((file, index) => ({
                    id: `${category}-${index + 1}`,
                    title: generateTitleFromFileName(file),
                    image: `${category}/${file}`
                }));
            } catch (error) {
                console.error(`Error scanning category ${category}:`, error);
                artworkData[category] = [];
            }
        });

        // Generate TypeScript data file
        const tsContent = `// Auto-generated portfolio data
// This file is generated by scripts/generate-portfolio-data.js
// Do not edit manually

export interface Artwork {
    id: string;
    title: string;
    year?: string;
    image: string;
    description?: string;
}

export interface Category {
    name: string;
    displayName: string;
    artworks: Artwork[];
}

// Portfolio categories data
export const portfolioCategories: string[] = ${JSON.stringify(categories, null, 2)};

// Display name mapping
export const displayNameMap: Record<string, string> = {
${categories.map(cat => {
    const displayName = cat.split(' ')
        .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
        .join(' ');
    return `    '${cat}': '${displayName}'`;
}).join(',\n')}
};

// Pre-generated artwork data for each category
export const categoryArtworks: Record<string, Artwork[]> = ${JSON.stringify(artworkData, null, 2)};

// Function to get display name for a category
export function getDisplayName(categoryName: string): string {
    return displayNameMap[categoryName] || categoryName.charAt(0).toUpperCase() + categoryName.slice(1);
}

// Function to generate title from filename
export function generateTitleFromFileName(fileName: string): string {
    const nameWithoutExt = fileName.replace(/\\.[^/.]+$/, '');
    return nameWithoutExt
        .split(/[-_]/)
        .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
        .join(' ');
}

// Function to get artworks for a category
export function scanCategoryArtworks(categoryName: string): Artwork[] {
    return categoryArtworks[categoryName] || [];
}
`;

        // Write the TypeScript file
        fs.writeFileSync(outputFile, tsContent);
        console.log('Generated portfolio data file:', outputFile);
        
        return categories;
    } catch (error) {
        console.error('Error generating portfolio data:', error);
        return [];
    }
}

// Run the script if called directly
if (require.main === module) {
    generatePortfolioData();
}

module.exports = { generatePortfolioData };
